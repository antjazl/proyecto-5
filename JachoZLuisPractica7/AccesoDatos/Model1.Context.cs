//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccesoDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BiologiaBdRelacionesEntities : DbContext
    {
        public BiologiaBdRelacionesEntities()
            : base("name=BiologiaBdRelacionesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<amphibia> amphibia { get; set; }
        public DbSet<autor> autor { get; set; }
        public DbSet<autorbiografia> autorbiografia { get; set; }
        public DbSet<aves> aves { get; set; }
        public DbSet<biografia> biografia { get; set; }
        public DbSet<catalogo> catalogo { get; set; }
        public DbSet<ColaReporte> ColaReporte { get; set; }
        public DbSet<divisiongeopolitica> divisiongeopolitica { get; set; }
        public DbSet<divisiongeopoliticacatalogoap> divisiongeopoliticacatalogoap { get; set; }
        public DbSet<enlacerelacionado> enlacerelacionado { get; set; }
        public DbSet<especie> especie { get; set; }
        public DbSet<especiecatalogo> especiecatalogo { get; set; }
        public DbSet<especielocalidad> especielocalidad { get; set; }
        public DbSet<especimen> especimen { get; set; }
        public DbSet<ImagenEspecimen> ImagenEspecimen { get; set; }
        public DbSet<localidad> localidad { get; set; }
        public DbSet<localidadcatalogo> localidadcatalogo { get; set; }
        public DbSet<mammalia> mammalia { get; set; }
        public DbSet<MENU> MENU { get; set; }
        public DbSet<multimedia> multimedia { get; set; }
        public DbSet<nombrecomun> nombrecomun { get; set; }
        public DbSet<nombrecomuncatalogo> nombrecomuncatalogo { get; set; }
        public DbSet<nombrecomunpublicacion> nombrecomunpublicacion { get; set; }
        public DbSet<ordenamientotaxa> ordenamientotaxa { get; set; }
        public DbSet<PERFIL> PERFIL { get; set; }
        public DbSet<PERMISOSPERFIL> PERMISOSPERFIL { get; set; }
        public DbSet<publicacion> publicacion { get; set; }
        public DbSet<publicacionano_bak> publicacionano_bak { get; set; }
        public DbSet<publicacionautor> publicacionautor { get; set; }
        public DbSet<publicacioncatalogo> publicacioncatalogo { get; set; }
        public DbSet<publicacionenlace> publicacionenlace { get; set; }
        public DbSet<reptilia> reptilia { get; set; }
        public DbSet<reptiliacatalogo> reptiliacatalogo { get; set; }
        public DbSet<sinonimo> sinonimo { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<taxa> taxa { get; set; }
        public DbSet<taxaaudio> taxaaudio { get; set; }
        public DbSet<taxapublicacion> taxapublicacion { get; set; }
        public DbSet<taxavideo> taxavideo { get; set; }
        public DbSet<tipo> tipo { get; set; }
        public DbSet<tipocatalogo> tipocatalogo { get; set; }
        public DbSet<USUARIO> USUARIO { get; set; }
        public DbSet<verificacionlocalidad> verificacionlocalidad { get; set; }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxa_Result> SeleccionarTaxaEspeciePorIdTaxa(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxa_Result>("SeleccionarTaxaEspeciePorIdTaxa", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxaSP_Result> SeleccionarTaxaEspeciePorIdTaxaSP(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxaSP_Result>("SeleccionarTaxaEspeciePorIdTaxaSP", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxaSPFinal_Result> SeleccionarTaxaEspeciePorIdTaxaSPFinal(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxaSPFinal_Result>("SeleccionarTaxaEspeciePorIdTaxaSPFinal", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxaSPFinalFinal_Result> SeleccionarTaxaEspeciePorIdTaxaSPFinalFinal(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxaSPFinalFinal_Result>("SeleccionarTaxaEspeciePorIdTaxaSPFinalFinal", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxaSPSP_Result> SeleccionarTaxaEspeciePorIdTaxaSPSP(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxaSPSP_Result>("SeleccionarTaxaEspeciePorIdTaxaSPSP", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaPorId_Result> SeleccionarTaxaPorId(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaPorId_Result>("SeleccionarTaxaPorId", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxas_Result> SeleccionarTaxas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxas_Result>("SeleccionarTaxas");
        }
    
        public virtual ObjectResult<SeleccionarTaxasAmphibiaSP_Result> SeleccionarTaxasAmphibiaSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxasAmphibiaSP_Result>("SeleccionarTaxasAmphibiaSP");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
